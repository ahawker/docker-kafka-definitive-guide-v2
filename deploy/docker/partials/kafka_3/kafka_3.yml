version: '3'
networks:
  docker-kafka-definitive-guide-v2:
services:
  kafka_1:
    depends_on:
      - zookeeper
    environment:
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_1_SERVICE_NAME}:${KAFKA_1_PORT},LISTENER_EXTERNAL://localhost:${KAFKA_1_EXTERNAL_PORT}"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: "1"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENERS: "INTERNAL://:${KAFKA_1_PORT},LISTENER_EXTERNAL://:${KAFKA_1_EXTERNAL_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=${KAFKA_1_LOG_LEVEL},kafka.producer.async.DefaultEventHandler=${KAFKA_1_LOG_LEVEL},state.change.logger=${KAFKA_1_LOG_LEVEL}"
      KAFKA_NUM_PARTITIONS: "1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_SERVICE_NAME}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_1_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
    image: "${KAFKA_IMG}:${KAFKA_TAG}"
    networks:
      - docker-kafka-definitive-guide-v2
    ports:
      - "${KAFKA_1_EXTERNAL_PORT}:${KAFKA_1_EXTERNAL_PORT}"
    restart: on-failure
    volumes:
      - kafka_1_data:/var/lib/kafka/data
  kafka_2:
    depends_on:
      - zookeeper
    environment:
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_2_SERVICE_NAME}:${KAFKA_2_PORT},LISTENER_EXTERNAL://localhost:${KAFKA_2_EXTERNAL_PORT}"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: "2"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENERS: "INTERNAL://:${KAFKA_2_PORT},LISTENER_EXTERNAL://:${KAFKA_2_EXTERNAL_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=${KAFKA_2_LOG_LEVEL},kafka.producer.async.DefaultEventHandler=${KAFKA_2_LOG_LEVEL},state.change.logger=${KAFKA_2_LOG_LEVEL}"
      KAFKA_NUM_PARTITIONS: "1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_SERVICE_NAME}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_2_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
    image: "${KAFKA_IMG}:${KAFKA_TAG}"
    networks:
      - docker-kafka-definitive-guide-v2
    ports:
      - "${KAFKA_2_EXTERNAL_PORT}:${KAFKA_2_EXTERNAL_PORT}"
    restart: on-failure
    volumes:
      - kafka_2_data:/var/lib/kafka/data
  kafka_3:
    depends_on:
      - zookeeper
    environment:
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://${KAFKA_3_SERVICE_NAME}:${KAFKA_3_PORT},LISTENER_EXTERNAL://localhost:${KAFKA_3_EXTERNAL_PORT}"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: "3"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENERS: "INTERNAL://:${KAFKA_3_PORT},LISTENER_EXTERNAL://:${KAFKA_3_EXTERNAL_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=${KAFKA_3_LOG_LEVEL},kafka.producer.async.DefaultEventHandler=${KAFKA_3_LOG_LEVEL},state.change.logger=${KAFKA_3_LOG_LEVEL}"
      KAFKA_NUM_PARTITIONS: "1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_SERVICE_NAME}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_3_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
    image: "${KAFKA_IMG}:${KAFKA_TAG}"
    networks:
      - docker-kafka-definitive-guide-v2
    ports:
      - "${KAFKA_3_EXTERNAL_PORT}:${KAFKA_3_EXTERNAL_PORT}"
    restart: on-failure
    volumes:
      - kafka_3_data:/var/lib/kafka/data
  kafka-init:
    depends_on:
      - kafka_1
      - kafka_2
      - kafka_3
    command: "/kafka-init-entrypoint.sh"
    entrypoint: ["/bin/sh", "-c"]
    environment:
      BOOTSTRAP_SERVER: "${KAFKA_1_SERVICE_NAME}"
      BOOTSTRAP_SERVER_PORT: "${KAFKA_1_PORT}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_1_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
    image: "${KAFKA_IMG}:${KAFKA_TAG}"
    networks:
      - docker-kafka-definitive-guide-v2
    restart: "no"
    volumes:
      - ${PWD}/../partials/kafka_3/rootfs/kafka-init-entrypoint.sh:/kafka-init-entrypoint.sh
      - ${PWD}/../partials/kafka_3/rootfs/kafka-init.d:/kafka-init.d
volumes:
  kafka_1_data:
  kafka_2_data:
  kafka_3_data:
